type CollectionMovie implements Collection & Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  title: String!
  type: String!
  trailers(first: Int = 100, offset: Int, after: String, orderBy: VideosConnectionOrderByInput): VideosConnection
}

interface Collection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  title: String!
  type: String!
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""A connection to a list of `Video` values."""
type VideosConnection {
  """A list of `Video` objects."""
  nodes: [Video]!

  """
  A list of edges which contains the `Video` and cursor to aid in pagination.
  """
  edges: [VideosEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Video` you could get from the connection."""
  totalCount: Int!
}

type Video implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  collectionId: UUID!
  url: String!
  type: String!

  """Reads a single `Collection` that is related to this `Video`."""
  collectionByCollectionId: Collection
}

"""A `Video` edge in the connection."""
type VideosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Video` at the end of the edge."""
  node: Video
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

input VideosConnectionOrderByInput {
  id: OrderByDirection
  url: OrderByDirection
}

enum OrderByDirection {
  ASC
  DESC
}

type CollectionSeason implements Collection & Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  title: String!
  type: String!
  countSeasons: Int
  countEpisodes: Int
  episodes(first: Int = 100, offset: Int, after: String, orderBy: VideosConnectionOrderByInput): VideosConnection
  trailers(first: Int = 100, offset: Int, after: String, orderBy: VideosConnectionOrderByInput): VideosConnection
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a single `CollectionMovie` using its globally unique `ID`."""
  collectionMovie(
    """
    The globally unique `ID` to be used in selecting a single `CollectionMovie`.
    """
    nodeId: ID!
  ): CollectionMovie

  """Reads a single `CollectionSeason` using its globally unique `ID`."""
  collectionSeason(
    """
    The globally unique `ID` to be used in selecting a single `CollectionSeason`.
    """
    nodeId: ID!
  ): CollectionSeason

  """Reads a single `Video` using its globally unique `ID`."""
  video(
    """The globally unique `ID` to be used in selecting a single `Video`."""
    nodeId: ID!
  ): Video
  collections(first: Int = 100, offset: Int, after: String, orderBy: CollectionsConnectionOrderByInput): CollectionsConnection
}

"""A connection to a list of `Collection` values."""
type CollectionsConnection {
  """A list of `Collection` objects."""
  nodes: [Collection]!

  """
  A list of edges which contains the `Collection` and cursor to aid in pagination.
  """
  edges: [CollectionsEdge]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Collection` you could get from the connection."""
  totalCount: Int!
}

"""A `Collection` edge in the connection."""
type CollectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Collection` at the end of the edge."""
  node: Collection
}

input CollectionsConnectionOrderByInput {
  id: OrderByDirection
  title: OrderByDirection
}
